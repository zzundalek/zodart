// Mocks generated by Mockito 5.4.6 from annotations
// in zodart/test/mocks/class_element/class_element.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:analyzer/dart/element/element.dart' as _i4;
import 'package:analyzer/dart/element/element2.dart' as _i2;
import 'package:analyzer/dart/element/nullability_suffix.dart' as _i7;
import 'package:analyzer/dart/element/type.dart' as _i3;
import 'package:analyzer/src/dart/element/inheritance_manager3.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeClassFragment_0 extends _i1.SmartFake implements _i2.ClassFragment {
  _FakeClassFragment_0(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

class _FakeInterfaceType_1 extends _i1.SmartFake implements _i3.InterfaceType {
  _FakeInterfaceType_1(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

class _FakeLibraryElement2_2 extends _i1.SmartFake implements _i2.LibraryElement2 {
  _FakeLibraryElement2_2(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

class _FakeElement2_3 extends _i1.SmartFake implements _i2.Element2 {
  _FakeElement2_3(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

class _FakeElementKind_4 extends _i1.SmartFake implements _i4.ElementKind {
  _FakeElementKind_4(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

class _FakeMetadata_5 extends _i1.SmartFake implements _i2.Metadata {
  _FakeMetadata_5(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

/// A class which mocks [ClassElement2].
///
/// See the documentation for Mockito's code generation for more information.
class MockClassElement2 extends _i1.Mock implements _i2.ClassElement2 {
  @override
  _i2.ClassFragment get firstFragment =>
      (super.noSuchMethod(
            Invocation.getter(#firstFragment),
            returnValue: _FakeClassFragment_0(
              this,
              Invocation.getter(#firstFragment),
            ),
            returnValueForMissingStub: _FakeClassFragment_0(
              this,
              Invocation.getter(#firstFragment),
            ),
          )
          as _i2.ClassFragment);

  @override
  List<_i2.ClassFragment> get fragments =>
      (super.noSuchMethod(
            Invocation.getter(#fragments),
            returnValue: <_i2.ClassFragment>[],
            returnValueForMissingStub: <_i2.ClassFragment>[],
          )
          as List<_i2.ClassFragment>);

  @override
  bool get hasNonFinalField =>
      (super.noSuchMethod(
            Invocation.getter(#hasNonFinalField),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isAbstract =>
      (super.noSuchMethod(
            Invocation.getter(#isAbstract),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isBase =>
      (super.noSuchMethod(
            Invocation.getter(#isBase),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isConstructable =>
      (super.noSuchMethod(
            Invocation.getter(#isConstructable),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDartCoreEnum =>
      (super.noSuchMethod(
            Invocation.getter(#isDartCoreEnum),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDartCoreObject =>
      (super.noSuchMethod(
            Invocation.getter(#isDartCoreObject),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isExhaustive =>
      (super.noSuchMethod(
            Invocation.getter(#isExhaustive),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isFinal =>
      (super.noSuchMethod(
            Invocation.getter(#isFinal),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isInterface =>
      (super.noSuchMethod(
            Invocation.getter(#isInterface),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isMixinApplication =>
      (super.noSuchMethod(
            Invocation.getter(#isMixinApplication),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isMixinClass =>
      (super.noSuchMethod(
            Invocation.getter(#isMixinClass),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isSealed =>
      (super.noSuchMethod(
            Invocation.getter(#isSealed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isValidMixin =>
      (super.noSuchMethod(
            Invocation.getter(#isValidMixin),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  List<_i3.InterfaceType> get allSupertypes =>
      (super.noSuchMethod(
            Invocation.getter(#allSupertypes),
            returnValue: <_i3.InterfaceType>[],
            returnValueForMissingStub: <_i3.InterfaceType>[],
          )
          as List<_i3.InterfaceType>);

  @override
  List<_i2.ConstructorElement2> get constructors2 =>
      (super.noSuchMethod(
            Invocation.getter(#constructors2),
            returnValue: <_i2.ConstructorElement2>[],
            returnValueForMissingStub: <_i2.ConstructorElement2>[],
          )
          as List<_i2.ConstructorElement2>);

  @override
  Map<_i5.Name, _i2.ExecutableElement2> get inheritedConcreteMembers =>
      (super.noSuchMethod(
            Invocation.getter(#inheritedConcreteMembers),
            returnValue: <_i5.Name, _i2.ExecutableElement2>{},
            returnValueForMissingStub: <_i5.Name, _i2.ExecutableElement2>{},
          )
          as Map<_i5.Name, _i2.ExecutableElement2>);

  @override
  Map<_i5.Name, _i2.ExecutableElement2> get inheritedMembers =>
      (super.noSuchMethod(
            Invocation.getter(#inheritedMembers),
            returnValue: <_i5.Name, _i2.ExecutableElement2>{},
            returnValueForMissingStub: <_i5.Name, _i2.ExecutableElement2>{},
          )
          as Map<_i5.Name, _i2.ExecutableElement2>);

  @override
  Map<_i5.Name, _i2.ExecutableElement2> get interfaceMembers =>
      (super.noSuchMethod(
            Invocation.getter(#interfaceMembers),
            returnValue: <_i5.Name, _i2.ExecutableElement2>{},
            returnValueForMissingStub: <_i5.Name, _i2.ExecutableElement2>{},
          )
          as Map<_i5.Name, _i2.ExecutableElement2>);

  @override
  List<_i3.InterfaceType> get interfaces =>
      (super.noSuchMethod(
            Invocation.getter(#interfaces),
            returnValue: <_i3.InterfaceType>[],
            returnValueForMissingStub: <_i3.InterfaceType>[],
          )
          as List<_i3.InterfaceType>);

  @override
  List<_i3.InterfaceType> get mixins =>
      (super.noSuchMethod(
            Invocation.getter(#mixins),
            returnValue: <_i3.InterfaceType>[],
            returnValueForMissingStub: <_i3.InterfaceType>[],
          )
          as List<_i3.InterfaceType>);

  @override
  _i3.InterfaceType get thisType =>
      (super.noSuchMethod(
            Invocation.getter(#thisType),
            returnValue: _FakeInterfaceType_1(
              this,
              Invocation.getter(#thisType),
            ),
            returnValueForMissingStub: _FakeInterfaceType_1(
              this,
              Invocation.getter(#thisType),
            ),
          )
          as _i3.InterfaceType);

  @override
  _i2.LibraryElement2 get enclosingElement2 =>
      (super.noSuchMethod(
            Invocation.getter(#enclosingElement2),
            returnValue: _FakeLibraryElement2_2(
              this,
              Invocation.getter(#enclosingElement2),
            ),
            returnValueForMissingStub: _FakeLibraryElement2_2(
              this,
              Invocation.getter(#enclosingElement2),
            ),
          )
          as _i2.LibraryElement2);

  @override
  List<_i2.FieldElement2> get fields2 =>
      (super.noSuchMethod(
            Invocation.getter(#fields2),
            returnValue: <_i2.FieldElement2>[],
            returnValueForMissingStub: <_i2.FieldElement2>[],
          )
          as List<_i2.FieldElement2>);

  @override
  List<_i2.GetterElement> get getters2 =>
      (super.noSuchMethod(
            Invocation.getter(#getters2),
            returnValue: <_i2.GetterElement>[],
            returnValueForMissingStub: <_i2.GetterElement>[],
          )
          as List<_i2.GetterElement>);

  @override
  List<_i2.MethodElement2> get methods2 =>
      (super.noSuchMethod(
            Invocation.getter(#methods2),
            returnValue: <_i2.MethodElement2>[],
            returnValueForMissingStub: <_i2.MethodElement2>[],
          )
          as List<_i2.MethodElement2>);

  @override
  List<_i2.SetterElement> get setters2 =>
      (super.noSuchMethod(
            Invocation.getter(#setters2),
            returnValue: <_i2.SetterElement>[],
            returnValueForMissingStub: <_i2.SetterElement>[],
          )
          as List<_i2.SetterElement>);

  @override
  _i2.Element2 get baseElement =>
      (super.noSuchMethod(
            Invocation.getter(#baseElement),
            returnValue: _FakeElement2_3(this, Invocation.getter(#baseElement)),
            returnValueForMissingStub: _FakeElement2_3(
              this,
              Invocation.getter(#baseElement),
            ),
          )
          as _i2.Element2);

  @override
  List<_i2.Element2> get children2 =>
      (super.noSuchMethod(
            Invocation.getter(#children2),
            returnValue: <_i2.Element2>[],
            returnValueForMissingStub: <_i2.Element2>[],
          )
          as List<_i2.Element2>);

  @override
  String get displayName =>
      (super.noSuchMethod(
            Invocation.getter(#displayName),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.getter(#displayName),
            ),
            returnValueForMissingStub: _i6.dummyValue<String>(
              this,
              Invocation.getter(#displayName),
            ),
          )
          as String);

  @override
  int get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  bool get isPrivate =>
      (super.noSuchMethod(
            Invocation.getter(#isPrivate),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isPublic =>
      (super.noSuchMethod(
            Invocation.getter(#isPublic),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isSynthetic =>
      (super.noSuchMethod(
            Invocation.getter(#isSynthetic),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i4.ElementKind get kind =>
      (super.noSuchMethod(
            Invocation.getter(#kind),
            returnValue: _FakeElementKind_4(this, Invocation.getter(#kind)),
            returnValueForMissingStub: _FakeElementKind_4(
              this,
              Invocation.getter(#kind),
            ),
          )
          as _i4.ElementKind);

  @override
  _i2.LibraryElement2 get library2 =>
      (super.noSuchMethod(
            Invocation.getter(#library2),
            returnValue: _FakeLibraryElement2_2(
              this,
              Invocation.getter(#library2),
            ),
            returnValueForMissingStub: _FakeLibraryElement2_2(
              this,
              Invocation.getter(#library2),
            ),
          )
          as _i2.LibraryElement2);

  @override
  _i2.Element2 get nonSynthetic2 =>
      (super.noSuchMethod(
            Invocation.getter(#nonSynthetic2),
            returnValue: _FakeElement2_3(
              this,
              Invocation.getter(#nonSynthetic2),
            ),
            returnValueForMissingStub: _FakeElement2_3(
              this,
              Invocation.getter(#nonSynthetic2),
            ),
          )
          as _i2.Element2);

  @override
  _i2.Metadata get metadata2 =>
      (super.noSuchMethod(
            Invocation.getter(#metadata2),
            returnValue: _FakeMetadata_5(this, Invocation.getter(#metadata2)),
            returnValueForMissingStub: _FakeMetadata_5(
              this,
              Invocation.getter(#metadata2),
            ),
          )
          as _i2.Metadata);

  @override
  bool get isSimplyBounded =>
      (super.noSuchMethod(
            Invocation.getter(#isSimplyBounded),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  List<_i2.TypeParameterElement2> get typeParameters2 =>
      (super.noSuchMethod(
            Invocation.getter(#typeParameters2),
            returnValue: <_i2.TypeParameterElement2>[],
            returnValueForMissingStub: <_i2.TypeParameterElement2>[],
          )
          as List<_i2.TypeParameterElement2>);

  @override
  bool isExtendableIn2(_i2.LibraryElement2? library) =>
      (super.noSuchMethod(
            Invocation.method(#isExtendableIn2, [library]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool isImplementableIn2(_i2.LibraryElement2? library) =>
      (super.noSuchMethod(
            Invocation.method(#isImplementableIn2, [library]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool isMixableIn2(_i2.LibraryElement2? library) =>
      (super.noSuchMethod(
            Invocation.method(#isMixableIn2, [library]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i2.ExecutableElement2? getInheritedConcreteMember(_i5.Name? name) =>
      (super.noSuchMethod(
            Invocation.method(#getInheritedConcreteMember, [name]),
            returnValueForMissingStub: null,
          )
          as _i2.ExecutableElement2?);

  @override
  _i2.ExecutableElement2? getInheritedMember(_i5.Name? name) =>
      (super.noSuchMethod(
            Invocation.method(#getInheritedMember, [name]),
            returnValueForMissingStub: null,
          )
          as _i2.ExecutableElement2?);

  @override
  _i2.ExecutableElement2? getInterfaceMember(_i5.Name? name) =>
      (super.noSuchMethod(
            Invocation.method(#getInterfaceMember, [name]),
            returnValueForMissingStub: null,
          )
          as _i2.ExecutableElement2?);

  @override
  _i2.ConstructorElement2? getNamedConstructor2(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#getNamedConstructor2, [name]),
            returnValueForMissingStub: null,
          )
          as _i2.ConstructorElement2?);

  @override
  List<_i2.ExecutableElement2>? getOverridden(_i5.Name? name) =>
      (super.noSuchMethod(
            Invocation.method(#getOverridden, [name]),
            returnValueForMissingStub: null,
          )
          as List<_i2.ExecutableElement2>?);

  @override
  _i3.InterfaceType instantiate({
    required List<_i3.DartType>? typeArguments,
    required _i7.NullabilitySuffix? nullabilitySuffix,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#instantiate, [], {
              #typeArguments: typeArguments,
              #nullabilitySuffix: nullabilitySuffix,
            }),
            returnValue: _FakeInterfaceType_1(
              this,
              Invocation.method(#instantiate, [], {
                #typeArguments: typeArguments,
                #nullabilitySuffix: nullabilitySuffix,
              }),
            ),
            returnValueForMissingStub: _FakeInterfaceType_1(
              this,
              Invocation.method(#instantiate, [], {
                #typeArguments: typeArguments,
                #nullabilitySuffix: nullabilitySuffix,
              }),
            ),
          )
          as _i3.InterfaceType);

  @override
  _i2.MethodElement2? lookUpConcreteMethod(
    String? methodName,
    _i2.LibraryElement2? library,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#lookUpConcreteMethod, [methodName, library]),
            returnValueForMissingStub: null,
          )
          as _i2.MethodElement2?);

  @override
  _i2.MethodElement2? lookUpInheritedMethod2({
    required String? methodName,
    required _i2.LibraryElement2? library,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#lookUpInheritedMethod2, [], {
              #methodName: methodName,
              #library: library,
            }),
            returnValueForMissingStub: null,
          )
          as _i2.MethodElement2?);

  @override
  _i2.FieldElement2? getField2(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#getField2, [name]),
            returnValueForMissingStub: null,
          )
          as _i2.FieldElement2?);

  @override
  _i2.GetterElement? getGetter2(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#getGetter2, [name]),
            returnValueForMissingStub: null,
          )
          as _i2.GetterElement?);

  @override
  _i2.MethodElement2? getMethod2(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#getMethod2, [name]),
            returnValueForMissingStub: null,
          )
          as _i2.MethodElement2?);

  @override
  _i2.SetterElement? getSetter2(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#getSetter2, [name]),
            returnValueForMissingStub: null,
          )
          as _i2.SetterElement?);

  @override
  _i2.GetterElement? lookUpGetter2({
    required String? name,
    required _i2.LibraryElement2? library,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#lookUpGetter2, [], {
              #name: name,
              #library: library,
            }),
            returnValueForMissingStub: null,
          )
          as _i2.GetterElement?);

  @override
  _i2.MethodElement2? lookUpMethod2({
    required String? name,
    required _i2.LibraryElement2? library,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#lookUpMethod2, [], {
              #name: name,
              #library: library,
            }),
            returnValueForMissingStub: null,
          )
          as _i2.MethodElement2?);

  @override
  _i2.SetterElement? lookUpSetter2({
    required String? name,
    required _i2.LibraryElement2? library,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#lookUpSetter2, [], {
              #name: name,
              #library: library,
            }),
            returnValueForMissingStub: null,
          )
          as _i2.SetterElement?);

  @override
  T? accept2<T>(_i2.ElementVisitor2<T>? visitor) =>
      (super.noSuchMethod(
            Invocation.method(#accept2, [visitor]),
            returnValueForMissingStub: null,
          )
          as T?);

  @override
  String displayString2({
    bool? multiline = false,
    bool? preferTypeAlias = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#displayString2, [], {
              #multiline: multiline,
              #preferTypeAlias: preferTypeAlias,
            }),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.method(#displayString2, [], {
                #multiline: multiline,
                #preferTypeAlias: preferTypeAlias,
              }),
            ),
            returnValueForMissingStub: _i6.dummyValue<String>(
              this,
              Invocation.method(#displayString2, [], {
                #multiline: multiline,
                #preferTypeAlias: preferTypeAlias,
              }),
            ),
          )
          as String);

  @override
  String getExtendedDisplayName2({String? shortName}) =>
      (super.noSuchMethod(
            Invocation.method(#getExtendedDisplayName2, [], {
              #shortName: shortName,
            }),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.method(#getExtendedDisplayName2, [], {
                #shortName: shortName,
              }),
            ),
            returnValueForMissingStub: _i6.dummyValue<String>(
              this,
              Invocation.method(#getExtendedDisplayName2, [], {
                #shortName: shortName,
              }),
            ),
          )
          as String);

  @override
  bool isAccessibleIn2(_i2.LibraryElement2? library) =>
      (super.noSuchMethod(
            Invocation.method(#isAccessibleIn2, [library]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i2.Element2? thisOrAncestorMatching2(
    bool Function(_i2.Element2)? predicate,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#thisOrAncestorMatching2, [predicate]),
            returnValueForMissingStub: null,
          )
          as _i2.Element2?);

  @override
  void visitChildren2<T>(_i2.ElementVisitor2<T>? visitor) => super.noSuchMethod(
    Invocation.method(#visitChildren2, [visitor]),
    returnValueForMissingStub: null,
  );
}
