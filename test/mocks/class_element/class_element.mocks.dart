// Mocks generated by Mockito 5.4.6 from annotations
// in zodart/test/mocks/class_element/class_element.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:analyzer/dart/element/element.dart' as _i2;
import 'package:analyzer/dart/element/element2.dart' as _i5;
import 'package:analyzer/dart/element/nullability_suffix.dart' as _i8;
import 'package:analyzer/dart/element/type.dart' as _i3;
import 'package:analyzer/source/source.dart' as _i6;
import 'package:analyzer/src/generated/engine.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAugmentedClassElement_0 extends _i1.SmartFake implements _i2.AugmentedClassElement {
  _FakeAugmentedClassElement_0(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

class _FakeInterfaceType_1 extends _i1.SmartFake implements _i3.InterfaceType {
  _FakeInterfaceType_1(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

class _FakeCompilationUnitElement_2 extends _i1.SmartFake implements _i2.CompilationUnitElement {
  _FakeCompilationUnitElement_2(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

class _FakeAnalysisContext_3 extends _i1.SmartFake implements _i4.AnalysisContext {
  _FakeAnalysisContext_3(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

class _FakeElement_4 extends _i1.SmartFake implements _i2.Element {
  _FakeElement_4(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

class _FakeElementKind_5 extends _i1.SmartFake implements _i5.ElementKind {
  _FakeElementKind_5(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

class _FakeLibraryElement_6 extends _i1.SmartFake implements _i2.LibraryElement {
  _FakeLibraryElement_6(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

class _FakeSource_7 extends _i1.SmartFake implements _i6.Source {
  _FakeSource_7(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

/// A class which mocks [ClassElement].
///
/// See the documentation for Mockito's code generation for more information.
class MockClassElement extends _i1.Mock implements _i2.ClassElement {
  @override
  _i2.AugmentedClassElement get augmented =>
      (super.noSuchMethod(
            Invocation.getter(#augmented),
            returnValue: _FakeAugmentedClassElement_0(
              this,
              Invocation.getter(#augmented),
            ),
            returnValueForMissingStub: _FakeAugmentedClassElement_0(
              this,
              Invocation.getter(#augmented),
            ),
          )
          as _i2.AugmentedClassElement);

  @override
  bool get hasNonFinalField =>
      (super.noSuchMethod(
            Invocation.getter(#hasNonFinalField),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isAbstract =>
      (super.noSuchMethod(
            Invocation.getter(#isAbstract),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isBase =>
      (super.noSuchMethod(
            Invocation.getter(#isBase),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isConstructable =>
      (super.noSuchMethod(
            Invocation.getter(#isConstructable),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDartCoreEnum =>
      (super.noSuchMethod(
            Invocation.getter(#isDartCoreEnum),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDartCoreObject =>
      (super.noSuchMethod(
            Invocation.getter(#isDartCoreObject),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isExhaustive =>
      (super.noSuchMethod(
            Invocation.getter(#isExhaustive),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isFinal =>
      (super.noSuchMethod(
            Invocation.getter(#isFinal),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isInterface =>
      (super.noSuchMethod(
            Invocation.getter(#isInterface),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isMixinApplication =>
      (super.noSuchMethod(
            Invocation.getter(#isMixinApplication),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isMixinClass =>
      (super.noSuchMethod(
            Invocation.getter(#isMixinClass),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isSealed =>
      (super.noSuchMethod(
            Invocation.getter(#isSealed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isValidMixin =>
      (super.noSuchMethod(
            Invocation.getter(#isValidMixin),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  List<_i3.InterfaceType> get allSupertypes =>
      (super.noSuchMethod(
            Invocation.getter(#allSupertypes),
            returnValue: <_i3.InterfaceType>[],
            returnValueForMissingStub: <_i3.InterfaceType>[],
          )
          as List<_i3.InterfaceType>);

  @override
  List<_i2.ConstructorElement> get constructors =>
      (super.noSuchMethod(
            Invocation.getter(#constructors),
            returnValue: <_i2.ConstructorElement>[],
            returnValueForMissingStub: <_i2.ConstructorElement>[],
          )
          as List<_i2.ConstructorElement>);

  @override
  List<_i3.InterfaceType> get interfaces =>
      (super.noSuchMethod(
            Invocation.getter(#interfaces),
            returnValue: <_i3.InterfaceType>[],
            returnValueForMissingStub: <_i3.InterfaceType>[],
          )
          as List<_i3.InterfaceType>);

  @override
  List<_i3.InterfaceType> get mixins =>
      (super.noSuchMethod(
            Invocation.getter(#mixins),
            returnValue: <_i3.InterfaceType>[],
            returnValueForMissingStub: <_i3.InterfaceType>[],
          )
          as List<_i3.InterfaceType>);

  @override
  String get name =>
      (super.noSuchMethod(
            Invocation.getter(#name),
            returnValue: _i7.dummyValue<String>(this, Invocation.getter(#name)),
            returnValueForMissingStub: _i7.dummyValue<String>(
              this,
              Invocation.getter(#name),
            ),
          )
          as String);

  @override
  _i3.InterfaceType get thisType =>
      (super.noSuchMethod(
            Invocation.getter(#thisType),
            returnValue: _FakeInterfaceType_1(
              this,
              Invocation.getter(#thisType),
            ),
            returnValueForMissingStub: _FakeInterfaceType_1(
              this,
              Invocation.getter(#thisType),
            ),
          )
          as _i3.InterfaceType);

  @override
  List<_i2.PropertyAccessorElement> get accessors =>
      (super.noSuchMethod(
            Invocation.getter(#accessors),
            returnValue: <_i2.PropertyAccessorElement>[],
            returnValueForMissingStub: <_i2.PropertyAccessorElement>[],
          )
          as List<_i2.PropertyAccessorElement>);

  @override
  _i2.CompilationUnitElement get enclosingElement3 =>
      (super.noSuchMethod(
            Invocation.getter(#enclosingElement3),
            returnValue: _FakeCompilationUnitElement_2(
              this,
              Invocation.getter(#enclosingElement3),
            ),
            returnValueForMissingStub: _FakeCompilationUnitElement_2(
              this,
              Invocation.getter(#enclosingElement3),
            ),
          )
          as _i2.CompilationUnitElement);

  @override
  List<_i2.FieldElement> get fields =>
      (super.noSuchMethod(
            Invocation.getter(#fields),
            returnValue: <_i2.FieldElement>[],
            returnValueForMissingStub: <_i2.FieldElement>[],
          )
          as List<_i2.FieldElement>);

  @override
  bool get isAugmentation =>
      (super.noSuchMethod(
            Invocation.getter(#isAugmentation),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  List<_i2.MethodElement> get methods =>
      (super.noSuchMethod(
            Invocation.getter(#methods),
            returnValue: <_i2.MethodElement>[],
            returnValueForMissingStub: <_i2.MethodElement>[],
          )
          as List<_i2.MethodElement>);

  @override
  List<_i2.Element> get children =>
      (super.noSuchMethod(
            Invocation.getter(#children),
            returnValue: <_i2.Element>[],
            returnValueForMissingStub: <_i2.Element>[],
          )
          as List<_i2.Element>);

  @override
  _i4.AnalysisContext get context =>
      (super.noSuchMethod(
            Invocation.getter(#context),
            returnValue: _FakeAnalysisContext_3(
              this,
              Invocation.getter(#context),
            ),
            returnValueForMissingStub: _FakeAnalysisContext_3(
              this,
              Invocation.getter(#context),
            ),
          )
          as _i4.AnalysisContext);

  @override
  _i2.Element get declaration =>
      (super.noSuchMethod(
            Invocation.getter(#declaration),
            returnValue: _FakeElement_4(this, Invocation.getter(#declaration)),
            returnValueForMissingStub: _FakeElement_4(
              this,
              Invocation.getter(#declaration),
            ),
          )
          as _i2.Element);

  @override
  String get displayName =>
      (super.noSuchMethod(
            Invocation.getter(#displayName),
            returnValue: _i7.dummyValue<String>(
              this,
              Invocation.getter(#displayName),
            ),
            returnValueForMissingStub: _i7.dummyValue<String>(
              this,
              Invocation.getter(#displayName),
            ),
          )
          as String);

  @override
  bool get hasAlwaysThrows =>
      (super.noSuchMethod(
            Invocation.getter(#hasAlwaysThrows),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasDeprecated =>
      (super.noSuchMethod(
            Invocation.getter(#hasDeprecated),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasDoNotStore =>
      (super.noSuchMethod(
            Invocation.getter(#hasDoNotStore),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasDoNotSubmit =>
      (super.noSuchMethod(
            Invocation.getter(#hasDoNotSubmit),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasFactory =>
      (super.noSuchMethod(
            Invocation.getter(#hasFactory),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasImmutable =>
      (super.noSuchMethod(
            Invocation.getter(#hasImmutable),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasInternal =>
      (super.noSuchMethod(
            Invocation.getter(#hasInternal),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasIsTest =>
      (super.noSuchMethod(
            Invocation.getter(#hasIsTest),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasIsTestGroup =>
      (super.noSuchMethod(
            Invocation.getter(#hasIsTestGroup),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasJS =>
      (super.noSuchMethod(
            Invocation.getter(#hasJS),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasLiteral =>
      (super.noSuchMethod(
            Invocation.getter(#hasLiteral),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasMustBeConst =>
      (super.noSuchMethod(
            Invocation.getter(#hasMustBeConst),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasMustBeOverridden =>
      (super.noSuchMethod(
            Invocation.getter(#hasMustBeOverridden),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasMustCallSuper =>
      (super.noSuchMethod(
            Invocation.getter(#hasMustCallSuper),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasNonVirtual =>
      (super.noSuchMethod(
            Invocation.getter(#hasNonVirtual),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasOptionalTypeArgs =>
      (super.noSuchMethod(
            Invocation.getter(#hasOptionalTypeArgs),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasOverride =>
      (super.noSuchMethod(
            Invocation.getter(#hasOverride),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasProtected =>
      (super.noSuchMethod(
            Invocation.getter(#hasProtected),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasRedeclare =>
      (super.noSuchMethod(
            Invocation.getter(#hasRedeclare),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasReopen =>
      (super.noSuchMethod(
            Invocation.getter(#hasReopen),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasRequired =>
      (super.noSuchMethod(
            Invocation.getter(#hasRequired),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasSealed =>
      (super.noSuchMethod(
            Invocation.getter(#hasSealed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasUseResult =>
      (super.noSuchMethod(
            Invocation.getter(#hasUseResult),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasVisibleForOverriding =>
      (super.noSuchMethod(
            Invocation.getter(#hasVisibleForOverriding),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasVisibleForTemplate =>
      (super.noSuchMethod(
            Invocation.getter(#hasVisibleForTemplate),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasVisibleForTesting =>
      (super.noSuchMethod(
            Invocation.getter(#hasVisibleForTesting),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasVisibleOutsideTemplate =>
      (super.noSuchMethod(
            Invocation.getter(#hasVisibleOutsideTemplate),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  int get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  bool get isPrivate =>
      (super.noSuchMethod(
            Invocation.getter(#isPrivate),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isPublic =>
      (super.noSuchMethod(
            Invocation.getter(#isPublic),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isSynthetic =>
      (super.noSuchMethod(
            Invocation.getter(#isSynthetic),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i5.ElementKind get kind =>
      (super.noSuchMethod(
            Invocation.getter(#kind),
            returnValue: _FakeElementKind_5(this, Invocation.getter(#kind)),
            returnValueForMissingStub: _FakeElementKind_5(
              this,
              Invocation.getter(#kind),
            ),
          )
          as _i5.ElementKind);

  @override
  _i2.LibraryElement get library =>
      (super.noSuchMethod(
            Invocation.getter(#library),
            returnValue: _FakeLibraryElement_6(
              this,
              Invocation.getter(#library),
            ),
            returnValueForMissingStub: _FakeLibraryElement_6(
              this,
              Invocation.getter(#library),
            ),
          )
          as _i2.LibraryElement);

  @override
  List<_i5.ElementAnnotation> get metadata =>
      (super.noSuchMethod(
            Invocation.getter(#metadata),
            returnValue: <_i5.ElementAnnotation>[],
            returnValueForMissingStub: <_i5.ElementAnnotation>[],
          )
          as List<_i5.ElementAnnotation>);

  @override
  int get nameLength =>
      (super.noSuchMethod(
            Invocation.getter(#nameLength),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  int get nameOffset =>
      (super.noSuchMethod(
            Invocation.getter(#nameOffset),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  _i2.Element get nonSynthetic =>
      (super.noSuchMethod(
            Invocation.getter(#nonSynthetic),
            returnValue: _FakeElement_4(this, Invocation.getter(#nonSynthetic)),
            returnValueForMissingStub: _FakeElement_4(
              this,
              Invocation.getter(#nonSynthetic),
            ),
          )
          as _i2.Element);

  @override
  _i6.Source get source =>
      (super.noSuchMethod(
            Invocation.getter(#source),
            returnValue: _FakeSource_7(this, Invocation.getter(#source)),
            returnValueForMissingStub: _FakeSource_7(
              this,
              Invocation.getter(#source),
            ),
          )
          as _i6.Source);

  @override
  _i6.Source get librarySource =>
      (super.noSuchMethod(
            Invocation.getter(#librarySource),
            returnValue: _FakeSource_7(this, Invocation.getter(#librarySource)),
            returnValueForMissingStub: _FakeSource_7(
              this,
              Invocation.getter(#librarySource),
            ),
          )
          as _i6.Source);

  @override
  bool get isSimplyBounded =>
      (super.noSuchMethod(
            Invocation.getter(#isSimplyBounded),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  List<_i2.TypeParameterElement> get typeParameters =>
      (super.noSuchMethod(
            Invocation.getter(#typeParameters),
            returnValue: <_i2.TypeParameterElement>[],
            returnValueForMissingStub: <_i2.TypeParameterElement>[],
          )
          as List<_i2.TypeParameterElement>);

  @override
  bool isExtendableIn(_i2.LibraryElement? library) =>
      (super.noSuchMethod(
            Invocation.method(#isExtendableIn, [library]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool isImplementableIn(_i2.LibraryElement? library) =>
      (super.noSuchMethod(
            Invocation.method(#isImplementableIn, [library]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool isMixableIn(_i2.LibraryElement? library) =>
      (super.noSuchMethod(
            Invocation.method(#isMixableIn, [library]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i2.FieldElement? getField(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#getField, [name]),
            returnValueForMissingStub: null,
          )
          as _i2.FieldElement?);

  @override
  _i2.PropertyAccessorElement? getGetter(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#getGetter, [name]),
            returnValueForMissingStub: null,
          )
          as _i2.PropertyAccessorElement?);

  @override
  _i2.MethodElement? getMethod(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#getMethod, [name]),
            returnValueForMissingStub: null,
          )
          as _i2.MethodElement?);

  @override
  _i2.ConstructorElement? getNamedConstructor(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#getNamedConstructor, [name]),
            returnValueForMissingStub: null,
          )
          as _i2.ConstructorElement?);

  @override
  _i2.PropertyAccessorElement? getSetter(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#getSetter, [name]),
            returnValueForMissingStub: null,
          )
          as _i2.PropertyAccessorElement?);

  @override
  _i3.InterfaceType instantiate({
    required List<_i3.DartType>? typeArguments,
    required _i8.NullabilitySuffix? nullabilitySuffix,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#instantiate, [], {
              #typeArguments: typeArguments,
              #nullabilitySuffix: nullabilitySuffix,
            }),
            returnValue: _FakeInterfaceType_1(
              this,
              Invocation.method(#instantiate, [], {
                #typeArguments: typeArguments,
                #nullabilitySuffix: nullabilitySuffix,
              }),
            ),
            returnValueForMissingStub: _FakeInterfaceType_1(
              this,
              Invocation.method(#instantiate, [], {
                #typeArguments: typeArguments,
                #nullabilitySuffix: nullabilitySuffix,
              }),
            ),
          )
          as _i3.InterfaceType);

  @override
  _i2.MethodElement? lookUpConcreteMethod(
    String? methodName,
    _i2.LibraryElement? library,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#lookUpConcreteMethod, [methodName, library]),
            returnValueForMissingStub: null,
          )
          as _i2.MethodElement?);

  @override
  _i2.PropertyAccessorElement? lookUpGetter(
    String? getterName,
    _i2.LibraryElement? library,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#lookUpGetter, [getterName, library]),
            returnValueForMissingStub: null,
          )
          as _i2.PropertyAccessorElement?);

  @override
  _i2.PropertyAccessorElement? lookUpInheritedConcreteGetter(
    String? getterName,
    _i2.LibraryElement? library,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#lookUpInheritedConcreteGetter, [
              getterName,
              library,
            ]),
            returnValueForMissingStub: null,
          )
          as _i2.PropertyAccessorElement?);

  @override
  _i2.MethodElement? lookUpInheritedConcreteMethod(
    String? methodName,
    _i2.LibraryElement? library,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#lookUpInheritedConcreteMethod, [
              methodName,
              library,
            ]),
            returnValueForMissingStub: null,
          )
          as _i2.MethodElement?);

  @override
  _i2.PropertyAccessorElement? lookUpInheritedConcreteSetter(
    String? setterName,
    _i2.LibraryElement? library,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#lookUpInheritedConcreteSetter, [
              setterName,
              library,
            ]),
            returnValueForMissingStub: null,
          )
          as _i2.PropertyAccessorElement?);

  @override
  _i2.MethodElement? lookUpInheritedMethod(
    String? methodName,
    _i2.LibraryElement? library,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#lookUpInheritedMethod, [methodName, library]),
            returnValueForMissingStub: null,
          )
          as _i2.MethodElement?);

  @override
  _i2.MethodElement? lookUpMethod(
    String? methodName,
    _i2.LibraryElement? library,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#lookUpMethod, [methodName, library]),
            returnValueForMissingStub: null,
          )
          as _i2.MethodElement?);

  @override
  _i2.PropertyAccessorElement? lookUpSetter(
    String? setterName,
    _i2.LibraryElement? library,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#lookUpSetter, [setterName, library]),
            returnValueForMissingStub: null,
          )
          as _i2.PropertyAccessorElement?);

  @override
  T? accept<T>(_i2.ElementVisitor<T>? visitor) =>
      (super.noSuchMethod(
            Invocation.method(#accept, [visitor]),
            returnValueForMissingStub: null,
          )
          as T?);

  @override
  String getDisplayString({
    bool? withNullability = true,
    bool? multiline = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getDisplayString, [], {
              #withNullability: withNullability,
              #multiline: multiline,
            }),
            returnValue: _i7.dummyValue<String>(
              this,
              Invocation.method(#getDisplayString, [], {
                #withNullability: withNullability,
                #multiline: multiline,
              }),
            ),
            returnValueForMissingStub: _i7.dummyValue<String>(
              this,
              Invocation.method(#getDisplayString, [], {
                #withNullability: withNullability,
                #multiline: multiline,
              }),
            ),
          )
          as String);

  @override
  String getExtendedDisplayName(String? shortName) =>
      (super.noSuchMethod(
            Invocation.method(#getExtendedDisplayName, [shortName]),
            returnValue: _i7.dummyValue<String>(
              this,
              Invocation.method(#getExtendedDisplayName, [shortName]),
            ),
            returnValueForMissingStub: _i7.dummyValue<String>(
              this,
              Invocation.method(#getExtendedDisplayName, [shortName]),
            ),
          )
          as String);

  @override
  bool isAccessibleIn(_i2.LibraryElement? library) =>
      (super.noSuchMethod(
            Invocation.method(#isAccessibleIn, [library]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  E? thisOrAncestorMatching<E extends _i2.Element>(
    bool Function(_i2.Element)? predicate,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#thisOrAncestorMatching, [predicate]),
            returnValueForMissingStub: null,
          )
          as E?);

  @override
  E? thisOrAncestorMatching3<E extends _i2.Element>(
    bool Function(_i2.Element)? predicate,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#thisOrAncestorMatching3, [predicate]),
            returnValueForMissingStub: null,
          )
          as E?);

  @override
  void visitChildren(_i2.ElementVisitor<dynamic>? visitor) => super.noSuchMethod(
    Invocation.method(#visitChildren, [visitor]),
    returnValueForMissingStub: null,
  );
}
