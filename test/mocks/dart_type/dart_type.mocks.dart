// Mocks generated by Mockito 5.4.6 from annotations
// in zodart/test/mocks/dart_type/dart_type.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:analyzer/dart/element/element.dart' as _i6;
import 'package:analyzer/dart/element/element2.dart' as _i7;
import 'package:analyzer/dart/element/nullability_suffix.dart' as _i3;
import 'package:analyzer/dart/element/type.dart' as _i2;
import 'package:analyzer/dart/element/type_visitor.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDartType_0 extends _i1.SmartFake implements _i2.DartType {
  _FakeDartType_0(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

/// A class which mocks [DartType].
///
/// See the documentation for Mockito's code generation for more information.
class MockDartType extends _i1.Mock implements _i2.DartType {
  @override
  _i2.DartType get extensionTypeErasure =>
      (super.noSuchMethod(
            Invocation.getter(#extensionTypeErasure),
            returnValue: _FakeDartType_0(
              this,
              Invocation.getter(#extensionTypeErasure),
            ),
            returnValueForMissingStub: _FakeDartType_0(
              this,
              Invocation.getter(#extensionTypeErasure),
            ),
          )
          as _i2.DartType);

  @override
  bool get isBottom =>
      (super.noSuchMethod(
            Invocation.getter(#isBottom),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDartAsyncFuture =>
      (super.noSuchMethod(
            Invocation.getter(#isDartAsyncFuture),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDartAsyncFutureOr =>
      (super.noSuchMethod(
            Invocation.getter(#isDartAsyncFutureOr),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDartAsyncStream =>
      (super.noSuchMethod(
            Invocation.getter(#isDartAsyncStream),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDartCoreBool =>
      (super.noSuchMethod(
            Invocation.getter(#isDartCoreBool),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDartCoreDouble =>
      (super.noSuchMethod(
            Invocation.getter(#isDartCoreDouble),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDartCoreEnum =>
      (super.noSuchMethod(
            Invocation.getter(#isDartCoreEnum),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDartCoreFunction =>
      (super.noSuchMethod(
            Invocation.getter(#isDartCoreFunction),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDartCoreInt =>
      (super.noSuchMethod(
            Invocation.getter(#isDartCoreInt),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDartCoreIterable =>
      (super.noSuchMethod(
            Invocation.getter(#isDartCoreIterable),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDartCoreList =>
      (super.noSuchMethod(
            Invocation.getter(#isDartCoreList),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDartCoreMap =>
      (super.noSuchMethod(
            Invocation.getter(#isDartCoreMap),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDartCoreNull =>
      (super.noSuchMethod(
            Invocation.getter(#isDartCoreNull),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDartCoreNum =>
      (super.noSuchMethod(
            Invocation.getter(#isDartCoreNum),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDartCoreObject =>
      (super.noSuchMethod(
            Invocation.getter(#isDartCoreObject),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDartCoreRecord =>
      (super.noSuchMethod(
            Invocation.getter(#isDartCoreRecord),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDartCoreSet =>
      (super.noSuchMethod(
            Invocation.getter(#isDartCoreSet),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDartCoreString =>
      (super.noSuchMethod(
            Invocation.getter(#isDartCoreString),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDartCoreSymbol =>
      (super.noSuchMethod(
            Invocation.getter(#isDartCoreSymbol),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDartCoreType =>
      (super.noSuchMethod(
            Invocation.getter(#isDartCoreType),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i3.NullabilitySuffix get nullabilitySuffix =>
      (super.noSuchMethod(
            Invocation.getter(#nullabilitySuffix),
            returnValue: _i3.NullabilitySuffix.question,
            returnValueForMissingStub: _i3.NullabilitySuffix.question,
          )
          as _i3.NullabilitySuffix);

  @override
  R accept<R>(_i4.TypeVisitor<R>? visitor) =>
      (super.noSuchMethod(
            Invocation.method(#accept, [visitor]),
            returnValue: _i5.dummyValue<R>(
              this,
              Invocation.method(#accept, [visitor]),
            ),
            returnValueForMissingStub: _i5.dummyValue<R>(
              this,
              Invocation.method(#accept, [visitor]),
            ),
          )
          as R);

  @override
  R acceptWithArgument<R, A>(
    _i4.TypeVisitorWithArgument<R, A>? visitor,
    A? argument,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#acceptWithArgument, [visitor, argument]),
            returnValue: _i5.dummyValue<R>(
              this,
              Invocation.method(#acceptWithArgument, [visitor, argument]),
            ),
            returnValueForMissingStub: _i5.dummyValue<R>(
              this,
              Invocation.method(#acceptWithArgument, [visitor, argument]),
            ),
          )
          as R);

  @override
  _i2.InterfaceType? asInstanceOf(_i6.InterfaceElement? element) =>
      (super.noSuchMethod(
            Invocation.method(#asInstanceOf, [element]),
            returnValueForMissingStub: null,
          )
          as _i2.InterfaceType?);

  @override
  _i2.InterfaceType? asInstanceOf2(_i7.InterfaceElement2? element) =>
      (super.noSuchMethod(
            Invocation.method(#asInstanceOf2, [element]),
            returnValueForMissingStub: null,
          )
          as _i2.InterfaceType?);

  @override
  String getDisplayString({bool? withNullability = true}) =>
      (super.noSuchMethod(
            Invocation.method(#getDisplayString, [], {
              #withNullability: withNullability,
            }),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.method(#getDisplayString, [], {
                #withNullability: withNullability,
              }),
            ),
            returnValueForMissingStub: _i5.dummyValue<String>(
              this,
              Invocation.method(#getDisplayString, [], {
                #withNullability: withNullability,
              }),
            ),
          )
          as String);

  @override
  bool isStructurallyEqualTo(_i2.DartType? other) =>
      (super.noSuchMethod(
            Invocation.method(#isStructurallyEqualTo, [other]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);
}
