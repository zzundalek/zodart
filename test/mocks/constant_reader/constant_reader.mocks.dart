// Mocks generated by Mockito 5.4.6 from annotations
// in zodart/test/mocks/constant_reader/constant_reader.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:analyzer/dart/constant/value.dart' as _i2;
import 'package:analyzer/dart/element/type.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:source_gen/src/constants/reader.dart' as _i4;
import 'package:source_gen/src/constants/revive.dart' as _i5;
import 'package:source_gen/src/type_checker.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDartObject_0 extends _i1.SmartFake implements _i2.DartObject {
  _FakeDartObject_0(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

class _FakeSymbol_1 extends _i1.SmartFake implements Symbol {
  _FakeSymbol_1(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

class _FakeDartType_2 extends _i1.SmartFake implements _i3.DartType {
  _FakeDartType_2(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

class _FakeConstantReader_3 extends _i1.SmartFake implements _i4.ConstantReader {
  _FakeConstantReader_3(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

class _FakeRevivable_4 extends _i1.SmartFake implements _i5.Revivable {
  _FakeRevivable_4(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

/// A class which mocks [ConstantReader].
///
/// See the documentation for Mockito's code generation for more information.
class MockConstantReader extends _i1.Mock implements _i4.ConstantReader {
  @override
  bool get isLiteral =>
      (super.noSuchMethod(
            Invocation.getter(#isLiteral),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i2.DartObject get objectValue =>
      (super.noSuchMethod(
            Invocation.getter(#objectValue),
            returnValue: _FakeDartObject_0(
              this,
              Invocation.getter(#objectValue),
            ),
            returnValueForMissingStub: _FakeDartObject_0(
              this,
              Invocation.getter(#objectValue),
            ),
          )
          as _i2.DartObject);

  @override
  bool get isNull =>
      (super.noSuchMethod(
            Invocation.getter(#isNull),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isBool =>
      (super.noSuchMethod(
            Invocation.getter(#isBool),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get boolValue =>
      (super.noSuchMethod(
            Invocation.getter(#boolValue),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isInt =>
      (super.noSuchMethod(
            Invocation.getter(#isInt),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  int get intValue =>
      (super.noSuchMethod(
            Invocation.getter(#intValue),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  bool get isDouble =>
      (super.noSuchMethod(
            Invocation.getter(#isDouble),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  double get doubleValue =>
      (super.noSuchMethod(
            Invocation.getter(#doubleValue),
            returnValue: 0.0,
            returnValueForMissingStub: 0.0,
          )
          as double);

  @override
  bool get isString =>
      (super.noSuchMethod(
            Invocation.getter(#isString),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  String get stringValue =>
      (super.noSuchMethod(
            Invocation.getter(#stringValue),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.getter(#stringValue),
            ),
            returnValueForMissingStub: _i6.dummyValue<String>(
              this,
              Invocation.getter(#stringValue),
            ),
          )
          as String);

  @override
  bool get isSymbol =>
      (super.noSuchMethod(
            Invocation.getter(#isSymbol),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  Symbol get symbolValue =>
      (super.noSuchMethod(
            Invocation.getter(#symbolValue),
            returnValue: _FakeSymbol_1(this, Invocation.getter(#symbolValue)),
            returnValueForMissingStub: _FakeSymbol_1(
              this,
              Invocation.getter(#symbolValue),
            ),
          )
          as Symbol);

  @override
  bool get isType =>
      (super.noSuchMethod(
            Invocation.getter(#isType),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i3.DartType get typeValue =>
      (super.noSuchMethod(
            Invocation.getter(#typeValue),
            returnValue: _FakeDartType_2(this, Invocation.getter(#typeValue)),
            returnValueForMissingStub: _FakeDartType_2(
              this,
              Invocation.getter(#typeValue),
            ),
          )
          as _i3.DartType);

  @override
  bool get isMap =>
      (super.noSuchMethod(
            Invocation.getter(#isMap),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  Map<_i2.DartObject?, _i2.DartObject?> get mapValue =>
      (super.noSuchMethod(
            Invocation.getter(#mapValue),
            returnValue: <_i2.DartObject?, _i2.DartObject?>{},
            returnValueForMissingStub: <_i2.DartObject?, _i2.DartObject?>{},
          )
          as Map<_i2.DartObject?, _i2.DartObject?>);

  @override
  bool get isList =>
      (super.noSuchMethod(
            Invocation.getter(#isList),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  List<_i2.DartObject> get listValue =>
      (super.noSuchMethod(
            Invocation.getter(#listValue),
            returnValue: <_i2.DartObject>[],
            returnValueForMissingStub: <_i2.DartObject>[],
          )
          as List<_i2.DartObject>);

  @override
  bool get isSet =>
      (super.noSuchMethod(
            Invocation.getter(#isSet),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  Set<_i2.DartObject> get setValue =>
      (super.noSuchMethod(
            Invocation.getter(#setValue),
            returnValue: <_i2.DartObject>{},
            returnValueForMissingStub: <_i2.DartObject>{},
          )
          as Set<_i2.DartObject>);

  @override
  bool instanceOf(_i7.TypeChecker? checker) =>
      (super.noSuchMethod(
            Invocation.method(#instanceOf, [checker]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i4.ConstantReader read(String? field) =>
      (super.noSuchMethod(
            Invocation.method(#read, [field]),
            returnValue: _FakeConstantReader_3(
              this,
              Invocation.method(#read, [field]),
            ),
            returnValueForMissingStub: _FakeConstantReader_3(
              this,
              Invocation.method(#read, [field]),
            ),
          )
          as _i4.ConstantReader);

  @override
  _i4.ConstantReader? peek(String? field) =>
      (super.noSuchMethod(
            Invocation.method(#peek, [field]),
            returnValueForMissingStub: null,
          )
          as _i4.ConstantReader?);

  @override
  _i5.Revivable revive() =>
      (super.noSuchMethod(
            Invocation.method(#revive, []),
            returnValue: _FakeRevivable_4(this, Invocation.method(#revive, [])),
            returnValueForMissingStub: _FakeRevivable_4(
              this,
              Invocation.method(#revive, []),
            ),
          )
          as _i5.Revivable);
}
