// Mocks generated by Mockito 5.4.6 from annotations
// in zodart/test/mocks/formal_parameter_element/formal_parameter_element.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:analyzer/dart/element/element.dart' as _i4;
import 'package:analyzer/dart/element/element2.dart' as _i2;
import 'package:analyzer/dart/element/type.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFormalParameterElement_0 extends _i1.SmartFake implements _i2.FormalParameterElement {
  _FakeFormalParameterElement_0(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

class _FakeFormalParameterFragment_1 extends _i1.SmartFake implements _i2.FormalParameterFragment {
  _FakeFormalParameterFragment_1(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

class _FakeDartType_2 extends _i1.SmartFake implements _i3.DartType {
  _FakeDartType_2(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

class _FakeElementKind_3 extends _i1.SmartFake implements _i4.ElementKind {
  _FakeElementKind_3(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

class _FakeElement2_4 extends _i1.SmartFake implements _i2.Element2 {
  _FakeElement2_4(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

class _FakeMetadata_5 extends _i1.SmartFake implements _i2.Metadata {
  _FakeMetadata_5(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

/// A class which mocks [FormalParameterElement].
///
/// See the documentation for Mockito's code generation for more information.
class MockFormalParameterElement extends _i1.Mock implements _i2.FormalParameterElement {
  @override
  _i2.FormalParameterElement get baseElement =>
      (super.noSuchMethod(
            Invocation.getter(#baseElement),
            returnValue: _FakeFormalParameterElement_0(
              this,
              Invocation.getter(#baseElement),
            ),
            returnValueForMissingStub: _FakeFormalParameterElement_0(
              this,
              Invocation.getter(#baseElement),
            ),
          )
          as _i2.FormalParameterElement);

  @override
  _i2.FormalParameterFragment get firstFragment =>
      (super.noSuchMethod(
            Invocation.getter(#firstFragment),
            returnValue: _FakeFormalParameterFragment_1(
              this,
              Invocation.getter(#firstFragment),
            ),
            returnValueForMissingStub: _FakeFormalParameterFragment_1(
              this,
              Invocation.getter(#firstFragment),
            ),
          )
          as _i2.FormalParameterFragment);

  @override
  List<_i2.FormalParameterElement> get formalParameters =>
      (super.noSuchMethod(
            Invocation.getter(#formalParameters),
            returnValue: <_i2.FormalParameterElement>[],
            returnValueForMissingStub: <_i2.FormalParameterElement>[],
          )
          as List<_i2.FormalParameterElement>);

  @override
  List<_i2.FormalParameterFragment> get fragments =>
      (super.noSuchMethod(
            Invocation.getter(#fragments),
            returnValue: <_i2.FormalParameterFragment>[],
            returnValueForMissingStub: <_i2.FormalParameterFragment>[],
          )
          as List<_i2.FormalParameterFragment>);

  @override
  bool get hasDefaultValue =>
      (super.noSuchMethod(
            Invocation.getter(#hasDefaultValue),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isCovariant =>
      (super.noSuchMethod(
            Invocation.getter(#isCovariant),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isInitializingFormal =>
      (super.noSuchMethod(
            Invocation.getter(#isInitializingFormal),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isNamed =>
      (super.noSuchMethod(
            Invocation.getter(#isNamed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isOptional =>
      (super.noSuchMethod(
            Invocation.getter(#isOptional),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isOptionalNamed =>
      (super.noSuchMethod(
            Invocation.getter(#isOptionalNamed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isOptionalPositional =>
      (super.noSuchMethod(
            Invocation.getter(#isOptionalPositional),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isPositional =>
      (super.noSuchMethod(
            Invocation.getter(#isPositional),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isRequired =>
      (super.noSuchMethod(
            Invocation.getter(#isRequired),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isRequiredNamed =>
      (super.noSuchMethod(
            Invocation.getter(#isRequiredNamed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isRequiredPositional =>
      (super.noSuchMethod(
            Invocation.getter(#isRequiredPositional),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isSuperFormal =>
      (super.noSuchMethod(
            Invocation.getter(#isSuperFormal),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  List<_i2.TypeParameterElement2> get typeParameters2 =>
      (super.noSuchMethod(
            Invocation.getter(#typeParameters2),
            returnValue: <_i2.TypeParameterElement2>[],
            returnValueForMissingStub: <_i2.TypeParameterElement2>[],
          )
          as List<_i2.TypeParameterElement2>);

  @override
  bool get hasImplicitType =>
      (super.noSuchMethod(
            Invocation.getter(#hasImplicitType),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isConst =>
      (super.noSuchMethod(
            Invocation.getter(#isConst),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isFinal =>
      (super.noSuchMethod(
            Invocation.getter(#isFinal),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isLate =>
      (super.noSuchMethod(
            Invocation.getter(#isLate),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isStatic =>
      (super.noSuchMethod(
            Invocation.getter(#isStatic),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i3.DartType get type =>
      (super.noSuchMethod(
            Invocation.getter(#type),
            returnValue: _FakeDartType_2(this, Invocation.getter(#type)),
            returnValueForMissingStub: _FakeDartType_2(
              this,
              Invocation.getter(#type),
            ),
          )
          as _i3.DartType);

  @override
  List<_i2.Element2> get children2 =>
      (super.noSuchMethod(
            Invocation.getter(#children2),
            returnValue: <_i2.Element2>[],
            returnValueForMissingStub: <_i2.Element2>[],
          )
          as List<_i2.Element2>);

  @override
  String get displayName =>
      (super.noSuchMethod(
            Invocation.getter(#displayName),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.getter(#displayName),
            ),
            returnValueForMissingStub: _i5.dummyValue<String>(
              this,
              Invocation.getter(#displayName),
            ),
          )
          as String);

  @override
  int get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  bool get isPrivate =>
      (super.noSuchMethod(
            Invocation.getter(#isPrivate),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isPublic =>
      (super.noSuchMethod(
            Invocation.getter(#isPublic),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isSynthetic =>
      (super.noSuchMethod(
            Invocation.getter(#isSynthetic),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i4.ElementKind get kind =>
      (super.noSuchMethod(
            Invocation.getter(#kind),
            returnValue: _FakeElementKind_3(this, Invocation.getter(#kind)),
            returnValueForMissingStub: _FakeElementKind_3(
              this,
              Invocation.getter(#kind),
            ),
          )
          as _i4.ElementKind);

  @override
  _i2.Element2 get nonSynthetic2 =>
      (super.noSuchMethod(
            Invocation.getter(#nonSynthetic2),
            returnValue: _FakeElement2_4(
              this,
              Invocation.getter(#nonSynthetic2),
            ),
            returnValueForMissingStub: _FakeElement2_4(
              this,
              Invocation.getter(#nonSynthetic2),
            ),
          )
          as _i2.Element2);

  @override
  _i2.Metadata get metadata2 =>
      (super.noSuchMethod(
            Invocation.getter(#metadata2),
            returnValue: _FakeMetadata_5(this, Invocation.getter(#metadata2)),
            returnValueForMissingStub: _FakeMetadata_5(
              this,
              Invocation.getter(#metadata2),
            ),
          )
          as _i2.Metadata);

  @override
  void appendToWithoutDelimiters2(StringBuffer? buffer) => super.noSuchMethod(
    Invocation.method(#appendToWithoutDelimiters2, [buffer]),
    returnValueForMissingStub: null,
  );

  @override
  T? accept2<T>(_i2.ElementVisitor2<T>? visitor) =>
      (super.noSuchMethod(
            Invocation.method(#accept2, [visitor]),
            returnValueForMissingStub: null,
          )
          as T?);

  @override
  String displayString2({
    bool? multiline = false,
    bool? preferTypeAlias = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#displayString2, [], {
              #multiline: multiline,
              #preferTypeAlias: preferTypeAlias,
            }),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.method(#displayString2, [], {
                #multiline: multiline,
                #preferTypeAlias: preferTypeAlias,
              }),
            ),
            returnValueForMissingStub: _i5.dummyValue<String>(
              this,
              Invocation.method(#displayString2, [], {
                #multiline: multiline,
                #preferTypeAlias: preferTypeAlias,
              }),
            ),
          )
          as String);

  @override
  String getExtendedDisplayName2({String? shortName}) =>
      (super.noSuchMethod(
            Invocation.method(#getExtendedDisplayName2, [], {
              #shortName: shortName,
            }),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.method(#getExtendedDisplayName2, [], {
                #shortName: shortName,
              }),
            ),
            returnValueForMissingStub: _i5.dummyValue<String>(
              this,
              Invocation.method(#getExtendedDisplayName2, [], {
                #shortName: shortName,
              }),
            ),
          )
          as String);

  @override
  bool isAccessibleIn2(_i2.LibraryElement2? library) =>
      (super.noSuchMethod(
            Invocation.method(#isAccessibleIn2, [library]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i2.Element2? thisOrAncestorMatching2(
    bool Function(_i2.Element2)? predicate,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#thisOrAncestorMatching2, [predicate]),
            returnValueForMissingStub: null,
          )
          as _i2.Element2?);

  @override
  void visitChildren2<T>(_i2.ElementVisitor2<T>? visitor) => super.noSuchMethod(
    Invocation.method(#visitChildren2, [visitor]),
    returnValueForMissingStub: null,
  );
}
