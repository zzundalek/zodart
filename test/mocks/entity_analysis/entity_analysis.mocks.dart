// Mocks generated by Mockito 5.4.6 from annotations
// in zodart/test/mocks/entity_analysis/entity_analysis.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:code_builder/code_builder.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:zodart/src/code_generation/analysis/entity_analysis.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [EntityAnalysis].
///
/// See the documentation for Mockito's code generation for more information.
class BaseMockEntityAnalysis extends _i1.Mock implements _i2.EntityAnalysis {
  @override
  Map<String, _i3.Reference> get schema =>
      (super.noSuchMethod(
            Invocation.getter(#schema),
            returnValue: <String, _i3.Reference>{},
            returnValueForMissingStub: <String, _i3.Reference>{},
          )
          as Map<String, _i3.Reference>);

  @override
  Set<String> get missingInEntity =>
      (super.noSuchMethod(
            Invocation.getter(#missingInEntity),
            returnValue: <String>{},
            returnValueForMissingStub: <String>{},
          )
          as Set<String>);

  @override
  Set<String> get missingInSchema =>
      (super.noSuchMethod(
            Invocation.getter(#missingInSchema),
            returnValue: <String>{},
            returnValueForMissingStub: <String>{},
          )
          as Set<String>);

  @override
  Map<String, ({String? actualType, String? expectedType})> get typeMismatches =>
      (super.noSuchMethod(
            Invocation.getter(#typeMismatches),
            returnValue: <String, ({String? actualType, String? expectedType})>{},
            returnValueForMissingStub: <String, ({String? actualType, String? expectedType})>{},
          )
          as Map<String, ({String? actualType, String? expectedType})>);

  @override
  bool get hasReqPositionalParams =>
      (super.noSuchMethod(
            Invocation.getter(#hasReqPositionalParams),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasOptPositionalParams =>
      (super.noSuchMethod(
            Invocation.getter(#hasOptPositionalParams),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isValid =>
      (super.noSuchMethod(
            Invocation.getter(#isValid),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);
}
