// Mocks generated by Mockito 5.4.4 from annotations
// in zodart/test/src/localization/z_issue_localization_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;
import 'package:zodart/src/base/base.dart' as _i3;
import 'package:zodart/src/localization/z_issue_localization.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ZIssueLocalization].
///
/// See the documentation for Mockito's code generation for more information.
class MockZIssueLocalization extends _i1.Mock
    implements _i2.ZIssueLocalization {
  @override
  String lengthNotMet(_i3.ZIssueLengthNotMet? issue) => (super.noSuchMethod(
        Invocation.method(
          #lengthNotMet,
          [issue],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #lengthNotMet,
            [issue],
          ),
        ),
        returnValueForMissingStub: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #lengthNotMet,
            [issue],
          ),
        ),
      ) as String);

  @override
  String minLengthNotMet(_i3.ZIssueMinLengthNotMet? issue) =>
      (super.noSuchMethod(
        Invocation.method(
          #minLengthNotMet,
          [issue],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #minLengthNotMet,
            [issue],
          ),
        ),
        returnValueForMissingStub: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #minLengthNotMet,
            [issue],
          ),
        ),
      ) as String);

  @override
  String maxLengthExceeded(_i3.ZIssueMaxLengthExceeded? issue) =>
      (super.noSuchMethod(
        Invocation.method(
          #maxLengthExceeded,
          [issue],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #maxLengthExceeded,
            [issue],
          ),
        ),
        returnValueForMissingStub: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #maxLengthExceeded,
            [issue],
          ),
        ),
      ) as String);

  @override
  String minNotMet(_i3.ZIssueMinNotMet? issue) => (super.noSuchMethod(
        Invocation.method(
          #minNotMet,
          [issue],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #minNotMet,
            [issue],
          ),
        ),
        returnValueForMissingStub: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #minNotMet,
            [issue],
          ),
        ),
      ) as String);

  @override
  String maxExceeded(_i3.ZIssueMaxExceeded? issue) => (super.noSuchMethod(
        Invocation.method(
          #maxExceeded,
          [issue],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #maxExceeded,
            [issue],
          ),
        ),
        returnValueForMissingStub: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #maxExceeded,
            [issue],
          ),
        ),
      ) as String);

  @override
  String parseFail(_i3.ZIssueParseFail? issue) => (super.noSuchMethod(
        Invocation.method(
          #parseFail,
          [issue],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #parseFail,
            [issue],
          ),
        ),
        returnValueForMissingStub: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #parseFail,
            [issue],
          ),
        ),
      ) as String);

  @override
  String missingValue(_i3.ZIssueMissingValue? issue) => (super.noSuchMethod(
        Invocation.method(
          #missingValue,
          [issue],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #missingValue,
            [issue],
          ),
        ),
        returnValueForMissingStub: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #missingValue,
            [issue],
          ),
        ),
      ) as String);
}
