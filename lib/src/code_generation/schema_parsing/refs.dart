/// Utility for managing type names during code generation.
///
/// Provides consistent and type-safe references to types used in generated code.
///
/// Note: The `refer()` function accepts a string representing a type name.
class Refs {
  /// Construct all type names from annotated class name.
  factory Refs(String annotatedClassName) {
    final constructName = _constructNameWithClassName(annotatedClassName);

    final schemaDefType = constructName(schemaDefTypeSuffix);
    final schemaResType = constructName(schemaResTypeSuffix);
    final utilsClass = constructName(utilsClassSuffix);
    final propsEnum = constructName(propsEnumSuffix, zodArtPrivate: false);
    final propsEnumWrapper = constructName(propsEnumWrapperSuffix);
    final utilsInterface = 'ZGenSchemaUtils<$propsEnumWrapper, $schemaResType>';
    final shapeType = 'ZGenSchemaShape<$schemaResType>';

    return Refs._(
      annotatedClass: annotatedClassName,
      schemaDefType: schemaDefType,
      schemaResType: schemaResType,
      utilsClass: utilsClass,
      propsEnum: propsEnum,
      propsEnumWrapper: propsEnumWrapper,
      utilsInterface: utilsInterface,
      shapeType: shapeType,
    );
  }

  const Refs._({
    required this.annotatedClass,
    required this.utilsClass,
    required this.schemaDefType,
    required this.schemaResType,
    required this.propsEnum,
    required this.propsEnumWrapper,
    required this.utilsInterface,
    required this.shapeType,
  });

  /// Annotated class name.
  final String annotatedClass;

  /// Utils class name.
  final String utilsClass;

  /// Schema definition type name.
  final String schemaDefType;

  /// Schema parse result (value) type name.
  final String schemaResType;

  /// Props enum name.
  final String propsEnum;

  /// Props wrapper class name.
  final String propsEnumWrapper;

  /// The name of the interface generated by ZodArt that is implemented by [utilsClass].
  ///
  /// This interfeace name is derived from a type defined by ZodArt.
  final String utilsInterface;

  /// The name of the shape type generated by ZodArt.
  ///
  /// This type is used as the type of the `shape` property in [utilsClass].
  final String shapeType;

  /// Utils class name suffix.
  static const utilsClassSuffix = 'Utils';

  /// Schema definition type name suffix.
  static const schemaDefTypeSuffix = 'Def';

  /// Schema parse result (value) type name suffix.
  static const schemaResTypeSuffix = 'Res';

  /// Props enum name suffix.
  static const propsEnumSuffix = 'Props';

  /// Props wrapper class name suffix.
  static const propsEnumWrapperSuffix = 'PropsWrapper';

  /// Returns a helper function for constructing generated entity names,
  /// based on the given `className`, a `suffix`, and the `zodArtPrivate` flag.
  ///
  /// If `zodArtPrivate` is true (default), the name is prefixed with `_\$Z`.
  static String Function(String, {bool zodArtPrivate}) _constructNameWithClassName(String className) =>
      (String suffix, {bool zodArtPrivate = true}) {
        final res = '$className$suffix';
        return zodArtPrivate ? '_\$Z$res' : res;
      };
}
