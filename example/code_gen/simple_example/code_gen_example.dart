// Ignore for the schema definition
// ignore_for_file: specify_nonobvious_property_types, avoid_print

import 'package:zodart/zodart.dart';

// Make the generated code to be a part of this file
// You must change it to the name of `your_file_name.zodart.dart`
part 'code_gen_example.zodart.dart';

/// The Person record type used to store the result value
typedef Person = ({String firstName, String lastName, int? age});

/// Schema defined using ZodArt and autogenerated with [zodart] annotation
///
/// Generates helper class [_$ZPersonSchemaUtils]
///
/// Validates that:
/// - `firstName` is from 1 to 20 characters long
/// - `lastName` is from 1 to 30 characters long
/// - `age` is â‰¥ 0 (optional)
@zodart
abstract class PersonSchema {
  /// Define the schema using Dart record.
  static final schema = (
    firstName: ZString().min(1).max(20),
    lastName: ZString().min(1).max(30),
    age: ZInt().optional().min(0),
  );

  /// Access to the generated helper class, which contains:
  ///
  /// - The `ZObject` instance for parsing/validating the schema.
  /// - A `withMapper` function for mapping parsed record to custom objects.
  /// - A `shape` descriptor containing field mappings and runtime type info.
  /// - Enum-style access to the schema properties.
  static const z = _$ZPersonSchemaUtils();

  /// Use the autogenerated [ZObject] with default mapper to [Person].
  static ZObject<Person> get zObject => z.zObject;
}

void main() {
  // Parse raw input (e.g. from an API, user form, etc.)
  // ZodArt infers the type of `result.value` as `Person`
  final result = PersonSchema.zObject.parse({'firstName': 'Zod', 'lastName': 'Art'});

  // Option 1: Check success and access value
  if (result.isSuccess) {
    print(result.value); // (firstName: Zod, lastName: Art, age: null)
  } else {
    print(result.issueSummary); // Optional fallback
  }

  // Option 2: Use functional match to handle both cases
  result.match(
    (issues) => print('There was a problem: ${issues.localizedSummary}'),
    (val) => print('Parsed person: $val'),
  );

  // Type-safe access to validation issues for a specific field:
  print(result.getRawIssuesFor(PersonSchema.z.props.firstName.name)?.localizedSummary);
}
