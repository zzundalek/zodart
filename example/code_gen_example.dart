// Ignore for the schema definition
// ignore_for_file: specify_nonobvious_property_types, avoid_print

import 'package:zodart/zodart.dart';

part 'code_gen_example.zodart.dart';

// Record type
typedef Customer = ({int id, String firstName, String lastName});

/// Schema with [zodart] annotation
///
/// Generate helper class [_$ZCustomerSchemaUtils]
@zodart
abstract class CustomerSchema {
  /// Define the schema using Dart record.
  static final schema = (
    id: ZInt().min(1),
    firstName: ZString().trim().min(1).max(20),
    lastName: ZString().trim().min(1).max(20),
  );

  /// Access to the generated helper class, which contains:
  ///
  /// - The `ZObject` instance for parsing/validating the schema.
  /// - A `withMapper` function for mapping parsed record to custom objects.
  /// - A `shape` descriptor containing field mappings and runtime type info.
  /// - Enum-style access to the schema properties.
  static const z = _$ZCustomerSchemaUtils();

  /// Use autogenerated [ZObject] with default mapper to [Customer].
  static ZObject<Customer> get zObject => z.zObject;
}

void main() {
  // Parses into `ZRes<Customer>`.
  final res = CustomerSchema.zObject.parse({
    'id': 31024235,
    'firstName': 'Zod',
    'lastName': 'Art',
  });

  if (res.isSuccess) {
    print(res.value);
  } else {
    print(res.issueSummary);
  }

  /// Type-safe access to the ZObject properties.
  print(res.getRawIssuesFor(CustomerSchema.z.props.id.name)?.localizedSummary);
}
